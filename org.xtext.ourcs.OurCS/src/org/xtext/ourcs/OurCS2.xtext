grammar org.xtext.example.mydsl1.OurCS2 with org.eclipse.xtext.common.Terminals

generate ourCS2 "http://www.xtext.org/example/mydsl1/OurCS2"

Model:
//	greetings+=Greeting*;
	proRule1+=ProRule1*;

ProRule1:
	INPUT;

INPUT:
	STATEMENT |
	CLASS_DECLARATION;

//TYPES_____________________________________________________________________

PREDEFINED_TYPE:
	'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' |
	'uint' | 'ulong' | 'ushort';

	//LITERAL__________________________________________________________________
BOOL_LITERAL:
	'true' | 'false';

NULL_LITERAL:
	'null';

INT_LITERAL:
	INT;

STRING_LITERAL:
	STRING;

LITERAL:
	BOOL_LITERAL | NULL_LITERAL | INT_LITERAL | STRING_LITERAL;

	//EXPRESSIOIN__________________________________________________________

ASSIGN_OPERATOR:
	'=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=';

REL_EXPRESSOIN:
	'==' | '!=' | '<=' | '>=' | '<' | '>';

BOOL_OPERATORS:
	'||' | '&&' | BAR | AMPERSAND | '%';

TYPE:
	NON_ARRAY_TYPE RANK_SPECIFIER*;

NON_ARRAY_TYPE:
//QUALIFIED_TYPE |
	BUILT_IN_TYPE;

INTEGRAL_TYPE:
	'sbyte' |
	'byte' |
	'short' |
	'ushort' |
	'int' |
	'uint' |
	'long' |
	'ulong' |
	'char';

BUILT_IN_TYPE:
	INTEGRAL_TYPE |
	//BUILT_IN_CLASS_TYPE |
	'bool' |
	'decimal' |
	'float' |
	'double';

RANK_SPECIFIER:
	'[' ','* ']';

PRIMARY_EXPRESSION:
//'new' NON_ARRAY_TYPE '[' EXPRESSION_LIST ']' RANK_SPECIFIER* ARRAY_INITIALIZER? |
//'new' ARRAY_TYPE ARRAY_INITIALIZER |
	LITERAL | ID |
	//'(' EXPRESSION ')' |
	//PRIMARY_EXPRESSION '.' ID |
	PREDEFINED_TYPE '.' ID |
	//PRIMARY_EXPRESSION '(' ARGUMENT_LIST ')' |
	//PRIMARY_EXPRESSION '[' EXPRESSION_LIST ']' |
	'this' | 'base' '.' ID
	//'base' '[' EXPRESSION_LIST ']' |
	//PRIMARY_EXPRESSION INCREMENT_DECREMENT |
	//'new' TYPE '(' ARGUMENT_LIST ')' |
	//'typeof' '(' TYPE_OR_VOID ')';// |
	//'checked' '(' EXPRESSION ')' |
	//'unchecked' '(' EXPRESSION ')';
;

EXPRESSION_LIST:
	EXPRESSION ','?;

EXPRESSION:
	COND_EXPRESSION | UNA_EXP;

EXPRESSION_LINE:
	(PRIMARY_EXPRESSION BOOL_OPERATORS EXPRESSION) | (PRIMARY_EXPRESSION '^' EXPRESSION) | (PRIMARY_EXPRESSION
	REL_EXPRESSOIN EXPRESSION);

BAR:
	'|';

AMPERSAND:
	'&';

COND_EXPRESSION:
	EXPRESSION_LINE;

INCREMENT_DECREMENT:
	'++' | '--';

UNA_EXP:
	UNARY_EXPRESSION EXPRESSION_LINE_1;

EXPRESSION_LINE_1:
	(ASSIGN_OPERATOR EXPRESSION)?;

UNARY_EXPRESSION:
	EXPRESSION_UNARY_OPERATOR UNARY_EXPRESSION | '(' TYPE ')' UNARY_EXPRESSION | PRIMARY_EXPRESSION;

EXPRESSION_UNARY_OPERATOR:
	PLUS | MINUS | INCREMENT_DECREMENT | '!' | '~' | '*';

PLUS:
	'+';

MINUS:
	'-';

/* A.2.5 Statements _________________________________________________________________________*/
ASSIGN_STMT:
	(PREDEFINED_TYPE name=ID ASSIGN_OPERATOR LITERAL ';') | 
	(name=ID INCREMENT_DECREMENT ';') |
	(INCREMENT_DECREMENT name=ID ';') | 
	(INCREMENT_DECREMENT name=ID) |
	(name=ID INCREMENT_DECREMENT) |
	(name=ID ASSIGN_OPERATOR LITERAL';');

SIMPLE_STMT_DECLARATION:
	PREDEFINED_TYPE name=ID ';';

SIMPLE_COND_STMT_ASSIGN:
	PREDEFINED_TYPE name=ID ASSIGN_OPERATOR EXPRESSION ';';

IF_STATEMENT:
	'if' '(' EXPRESSION ')' BLOCK location=ELSE_PART?;

ELSE_PART:
	'else' BLOCK;

SWITCH_LABEL:
	("case" EXPRESSION ":") | ("default" ":");

SWITCH_SECTION:
	SWITCH_LABEL+ location=STATEMENT+;

SWITCH_STATEMENT:
	"switch" "(" ID ")" "{" location=SWITCH_SECTION* "}";

BLOCK:
	"{" location=STATEMENT* "}";

ITERATION_STATEMENT:
	WHILE_STATEMENT | DO_STATEMENT | FOR_STATEMENT
	//    FOREACH_STATEMENT
;

FOR_STATEMENT:
	'for' '(' ASSIGN_STMT? COND_EXPRESSION ';' ASSIGN_STMT? ')' location=BLOCK;

WHILE_STATEMENT:
	'while' '(' COND_EXPRESSION ')' location=BLOCK;

DO_STATEMENT:
	'do' location=BLOCK 'while' '(' COND_EXPRESSION ')' ';';

JUMP_STATEMENT:
    BREAK_STATEMENT |
    CONTINUE_STATEMENT |
    GOTO_STATEMENT |
    RETURN_STATEMENT |
    THROW_STATEMENT
;

BREAK_STATEMENT:
    "break" ";"
;

CONTINUE_STATEMENT:
    "continue" ";"
;    

GOTO_STATEMENT:
    ("goto" ID ";") |
    ("goto" "case" COND_EXPRESSION ";") |
    ("goto" "default" ";")
;

RETURN_STATEMENT:
    "return" EXPRESSION? ";"
;

THROW_STATEMENT:
    "throw" EXPRESSION? ";"
;

BUILT_IN_CLASS_TYPE:
    "object" |
    "string"
;

GENERAL_CATCH_CLAUSE:
    "catch" BLOCK;

SPECIFIC_CATCH_CLAUSE:
    "catch" "(" BUILT_IN_CLASS_TYPE ID? ")" BLOCK
;

FINALLY_CLAUSE:
    "finally" BLOCK;

CATCH_CLAUSES:
    //(location=SPECIFIC_CATCH_CLAUSE+ location=GENERAL_CATCH_CLAUSE?) |
    (location=SPECIFIC_CATCH_CLAUSE* location=GENERAL_CATCH_CLAUSE)
;

TRY_STATEMENT_LINE:
	(CATCH_CLAUSES location=FINALLY_CLAUSE?) |
	(FINALLY_CLAUSE)
;

TRY_STATEMENT:
    "try" BLOCK location=TRY_STATEMENT_LINE 
;

STATEMENT:
	ASSIGN_STMT | SIMPLE_STMT_DECLARATION | SIMPLE_COND_STMT_ASSIGN | IF_STATEMENT | ITERATION_STATEMENT |
	SWITCH_STATEMENT | JUMP_STATEMENT | TRY_STATEMENT;
	

// ATTRIBUTES -------------------------------------------------------------------

ATTRIBUTES:
    ATTRIBUTES_SECTION*;

ATTRIBUTES_SECTION:
    "[" ( ATTRIBUTE_TARGET ":" )? ATTRIBUTE_LIST "]";

ATTRIBUTE_TARGET:
    "field" |
    "event" |
    "method" |
    "module" |
    "param" |
    "property" |
    "return" |
    "type";

ATTRIBUTE_LIST:
    ATTRIBUTE ','?;

ATTRIBUTE:
    ATTRIBUTE_NAME ATTRIBUTE_ARGUMENTS?;

ATTRIBUTE_NAME:
    ID;

ATTRIBUTE_ARGUMENTS:
    "(" EXPRESSION_LIST? ")";

// classes ----------------------------------------------------------------------

CLASS_DECLARATION:
    ATTRIBUTES CLASS_MODIFIER* "class" ID /*CLASS_BASE? CLASS_BODY*/ ";"?;

CLASS_MODIFIER:
    "new" |
    "public" |
    "protected" |
    "internal" |
    "private" |
    "abstract" |
    "sealed";
    
//CLASS_BODY:
//    "{" location=CLASS_MEMBER_DECLARATION* "}";
//
//CLASS_MEMBER_DECLARATION:
//    CONSTANT_DECLARATION
////    field-declaration |
////    method-declaration |
////    property-declaration |
////    event-declaration |
////    indexer-declaration |
////    operator-declaration |
////    constructor-declaration |
////    destructor-declaration |
////    static-constructor-declaration |
////    type-declaration   
//;
//
//CONSTANT_DECLARATION:
//    ATTRIBUTES CONSTANT_MODIFIER* "const" ASSIGN_STMT;
//
//CONSTANT_MODIFIER:
//    "new" |
//    "public" |
//    "protected" | 
//    "internal" |
//    "private";

    
