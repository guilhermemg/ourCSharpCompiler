// variable declaration ----------------------------------------------------------

bool hello;
int a;
double b;
short c;
float k;
string s;
object obj;

// assignment statements -------------------------------------------------------

bool id = true;
int a = false;
int b = 30;
string st = 'ssssdsda';
bool x = false;

int b += 2;
decimal a1 = -a;
decimal a1 = (decimal) +a;
bool x = y == a;

decimal a1 = a && a;

int a = f && d || z;

//double a = 1.3E+9 * 1.9;
//int a = e >> f;
//int a = 3 + 5;

decimal a = base.a;
int a = a & b;
decimal a = null;

// if else statements --------------------------------------------------------

if (a && b) {
	int c = 2 ;
}

if (a && b) {
	int c = 2;
} 
else {
	int c = 3;
}

// loop statements ----------------------------------------------------------

for(int i = 0; i < 5; i++) {
	if(a || b){
		int a = 0;
	} else {
		if (a == b) {
		 	a = 1;
		 }
	}
}

while(a || b){
	int c = 10;
	string ch = "ok";
}

do{
	if(true){
		int a = 40;
	}
	
} while(a || b);

// switch case ------------------------------------------------------------

switch ( a ) {
	case 1:
		a = 2;
		break;
	case 2:
		a = 5;
		break;
	default:
		a = 4;
}

// return, throw and goto ----------------------------------------------------

goto x;
goto case x <= y;
goto default;

for (int i = 0; i < 10; i++) {
	if(i == 2) { 
		continue;
	}
	if(i == 8444) {
		 break;
	}
	if(i % 5 == 0) {
		goto a;
	}
	else {
		return i;		
	}
}

while ( a > v ) {
	if ( a % 100 == true) {
		throw;
	}
	else {
		return a > 2;
	}
}

// try statements ----------------------------------------------------------

try {
	a = 2;
	
	a++;
	++a;
	
	b--;
	--b;
	
	b+=234;
} 
catch( string c ) { // specific catch block
	a+=5;
} 
catch (string d) { // specific catch block
	d += "wfsdfsdf";
} 
catch {
	d += "ssssssssss"; // general catch block
}
finally {
	decimal ja = 1.2e+0;
}


//pre-processing directives ---------------------------------------------------

#define directive1
#define directive2

#undef directive2
#undef directive1


// attributes and classes declaration ----------------------------------------

[ param : sdfd, ksdd ]
public abstract class C1 {
	const int a = 213;
};

[ param : sdfdfd, asdf ]
[ field: sdfsdf, sdfsndf, sdsfd]
private class C2 {
	const string str = "AAAAAA";
}; 

[ param : sdfdfd ]
[ field : AB(adf, sdf), BB(32, 55, "sdfsdf") ]
[ type: BB(123, 234, 345, 546) ]
protected internal class C3 {
	const ushort aa = "\u234";
	const int sdfl = 9999;
	
	private const int x = 2;
	protected const object o = "32";
}

protected internal class C4 {
	[ field : c ]
	[ type : CC() ]
	
	const ushort aa = "\u234";
	const int sdfl = 9999;
	
	readonly float k = 2; // field declaration
	static double j = 123; // field declaration
	volatile int n = 59; 
	
	private const int x = 2;
	protected const object o = "32";
};

protected internal class C4 {
	[ field : c ]
	[ type : CC() ]
	
	const ushort aa = "\u234";
	const int sdfl = 9999;
	
	private const int x = 2;
	protected const object o = "32";
	
	private static int meth1() {
		int c = 2;
		string k = "";	
	}
	
	public static string meth2(int a, string x, string y) {
		char c = 'c';	
	}
	
	public void meth3(int a, int b) {
		char d = 'd';
		
		if(k > 2) {
			k++;
		}
		else {
			k--;
		}
	}
};


